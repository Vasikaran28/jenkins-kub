pipeline {
    agent any

    environment {
        ACR_NAME = 'jenkinsContainer07' // Your Azure Container Registry name
        IMAGE_NAME = 'python-app' // Name of the Docker image
        IMAGE_TAG = 'v1' // Tag for the Docker image
        AKS_CLUSTER_NAME = 'jenkins_kub_testing' // Your AKS cluster name
        RESOURCE_GROUP = 'kub_rg' // Your resource group
        AZURE_SP_ID = '173fd2c7-ae07-4144-bbb6-94b1047cc188' // Client ID of the service principal
        AZURE_SP_SECRET = 'rry8Q~mk3TP8h1yqhCuWee~Rew3wFTkndJqBqcZf' // Client Secret of the service principal
        AZURE_TENANT_ID = '5a86d774-5917-4ac5-b5d8-9c7691f841bf' // Your Azure Tenant ID
        AZURE_SUBSCRIPTION_ID = '9f25e6a7-b97d-4ae6-8200-eb5a6628f5e9' // Your Azure Subscription ID
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the Git repository
                git 'https://github.com/Vasikaran28/jenkins-kub'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh 'docker build -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG .'
                }
            }
        }

        stage('Login to Azure and ACR') {
            steps {
                script {
                    // Login to Azure using the service principal
                    sh """
                        az login --service-principal \
                        --username $AZURE_SP_ID \
                        --password $AZURE_SP_SECRET \
                        --tenant $AZURE_TENANT_ID
                        
                        // Set the active subscription
                        az account set --subscription $AZURE_SUBSCRIPTION_ID

                        // Login to Azure Container Registry
                        az acr login --name $ACR_NAME
                    """
                }
            }
        }

        stage('Push to ACR') {
            steps {
                script {
                    // Push the Docker image to Azure Container Registry
                    sh "docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG"
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                script {
                    // Deploy the application to Azure Kubernetes Service
                    sh "kubectl apply -f deployment.yaml"
                }
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the build
            cleanWs()
        }
    }
}
